import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Shield, AlertTriangle, Timer, Zap, ArrowUpRight, Lightbulb, Sparkles } from 'lucide-react';

interface VulnerabilityData {
  overallRiskScore: number;
  automationRisk: number;
  displacementTimeframe: string;
  currentJobTitle: string;
  currentIndustry: string;
  riskFactors: { factor: string; impact: number; description: string }[];
  safeguardingStrategies: { strategy: string; effectiveness: number; description: string }[];
}

interface VulnerabilityAssessmentProps {
  assessmentData?: VulnerabilityData;
  onStartAssessment: (jobTitle: string, industry: string) => void;
  isAssessing: boolean;
}

const INDUSTRIES = [
  "Technology", "Healthcare", "Finance", "Education", "Manufacturing", 
  "Retail", "Media & Entertainment", "Real Estate", "Agriculture", 
  "Transportation", "Energy", "Consulting", "Government", "Non-profit"
];

export function VulnerabilityAssessment({ 
  assessmentData, 
  onStartAssessment, 
  isAssessing 
}: VulnerabilityAssessmentProps) {
  const [jobTitle, setJobTitle] = useState('');
  const [industry, setIndustry] = useState('');

  const handleStartAssessment = () => {
    if (jobTitle && industry) {
      onStartAssessment(jobTitle, industry);
    }
  };

  const getRiskColor = (score: number) => {
    if (score < 30) return "bg-green-500 text-white";
    if (score < 60) return "bg-yellow-500 text-white";
    return "bg-red-500 text-white";
  };

  const getRiskLabel = (score: number) => {
    if (score < 30) return "Low Risk";
    if (score < 60) return "Moderate Risk";
    return "High Risk";
  };

  const getTimeframeUrgency = (timeframe: string) => {
    if (timeframe.includes("10+ years")) return "bg-green-100 text-green-800 border-green-300";
    if (timeframe.includes("5-10 years")) return "bg-blue-100 text-blue-800 border-blue-300";
    if (timeframe.includes("3-5 years")) return "bg-yellow-100 text-yellow-800 border-yellow-300";
    return "bg-red-100 text-red-800 border-red-300";
  };

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">AI Vulnerability Assessment</h2>
      
      {!assessmentData && !isAssessing ? (
        <Card className="dark:bg-background/80">
          <CardHeader className="dark:bg-background/95">
            <CardTitle className="flex items-center gap-2">
              <Shield className="h-5 w-5 text-primary" />
              AI Displacement Risk Indexâ„¢
            </CardTitle>
            <CardDescription>
              Assess your current role's vulnerability to AI automation with our proprietary risk scoring system
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid gap-4">
              <div className="space-y-2">
                <Label htmlFor="job-title">Current Job Title</Label>
                <Input 
                  id="job-title" 
                  placeholder="e.g. Senior Software Engineer" 
                  value={jobTitle}
                  onChange={(e) => setJobTitle(e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="industry">Industry</Label>
                <Select 
                  value={industry} 
                  onValueChange={setIndustry}
                >
                  <SelectTrigger id="industry">
                    <SelectValue placeholder="Select your industry" />
                  </SelectTrigger>
                  <SelectContent>
                    {INDUSTRIES.map((ind) => (
                      <SelectItem key={ind} value={ind}>{ind}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
          <CardFooter>
            <Button 
              className="w-full" 
              onClick={handleStartAssessment}
              disabled={!jobTitle || !industry}
            >
              Start AI Vulnerability Assessment
            </Button>
          </CardFooter>
        </Card>
      ) : isAssessing ? (
        <Card className="dark:bg-background/80">
          <CardHeader className="dark:bg-background/95">
            <CardTitle>Analyzing Your AI Displacement Risk</CardTitle>
            <CardDescription>
              Our proprietary models are calculating your career's vulnerability to AI disruption...
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <Progress value={45} className="h-2" />
            <div className="text-center text-sm text-gray-500">
              This may take a few moments as we analyze your role against thousands of AI capability data points
            </div>
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-6">
          {/* Summary Card */}
          <Card className="dark:bg-background/80">
            <CardHeader className="pb-3 dark:bg-background/95">
              <div className="flex justify-between items-center">
                <CardTitle className="text-xl">Vulnerability Summary</CardTitle>
                <Badge 
                  className={`text-md py-1 px-3 ${getRiskColor(assessmentData!.overallRiskScore)}`}
                >
                  {getRiskLabel(assessmentData!.overallRiskScore)} ({assessmentData!.overallRiskScore}/100)
                </Badge>
              </div>
              <CardDescription>
                {assessmentData!.currentJobTitle} in {assessmentData!.currentIndustry}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <AlertTriangle className="h-5 w-5 text-yellow-500" />
                    <span className="font-medium">Automation Risk</span>
                  </div>
                  <div className="bg-gray-100 dark:bg-gray-800 rounded-full h-4 w-full">
                    <div 
                      className={`h-full rounded-full ${getRiskColor(assessmentData!.automationRisk)}`} 
                      style={{ width: `${assessmentData!.automationRisk}%` }}
                    ></div>
                  </div>
                  <p className="text-sm text-gray-500">
                    {assessmentData!.automationRisk}% of your current role's tasks could be automated by AI
                  </p>
                </div>
                
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <Timer className="h-5 w-5 text-primary" />
                    <span className="font-medium">Estimated Timeline</span>
                  </div>
                  <div className="pt-2">
                    <Badge 
                      variant="outline" 
                      className={`text-sm py-1 px-3 border ${getTimeframeUrgency(assessmentData!.displacementTimeframe)}`}
                    >
                      {assessmentData!.displacementTimeframe}
                    </Badge>
                  </div>
                  <p className="text-sm text-gray-500">
                    Estimated time before significant AI displacement in your role
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Detailed Analysis Tabs */}
          <Tabs defaultValue="risk-factors">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="risk-factors">Risk Factors</TabsTrigger>
              <TabsTrigger value="safeguarding">Safeguarding Strategies</TabsTrigger>
            </TabsList>
            
            <TabsContent value="risk-factors" className="mt-4 space-y-4">
              {assessmentData!.riskFactors.map((factor, idx) => (
                <Alert key={idx} className="border-l-4 border-l-yellow-500">
                  <div className="flex justify-between items-start">
                    <div>
                      <AlertTitle className="flex items-center gap-2">
                        <Zap className="h-4 w-4 text-yellow-500" />
                        {factor.factor}
                      </AlertTitle>
                      <AlertDescription className="mt-2">
                        {factor.description}
                      </AlertDescription>
                    </div>
                    <Badge className={getRiskColor(factor.impact)}>
                      {factor.impact}% Impact
                    </Badge>
                  </div>
                </Alert>
              ))}
            </TabsContent>
            
            <TabsContent value="safeguarding" className="mt-4 space-y-4">
              {assessmentData!.safeguardingStrategies.map((strategy, idx) => (
                <Alert key={idx} className="border-l-4 border-l-primary">
                  <div className="flex justify-between items-start">
                    <div>
                      <AlertTitle className="flex items-center gap-2">
                        <Lightbulb className="h-4 w-4 text-primary" />
                        {strategy.strategy}
                      </AlertTitle>
                      <AlertDescription className="mt-2">
                        {strategy.description}
                      </AlertDescription>
                    </div>
                    <Badge className="bg-primary">
                      {strategy.effectiveness}% Effective
                    </Badge>
                  </div>
                </Alert>
              ))}
            </TabsContent>
          </Tabs>
          
          {/* Action Card - Updated with functional buttons that match tab interface */}
          <Card className="bg-primary/5 border-primary/20">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Sparkles className="h-5 w-5 text-primary" />
                Next Steps
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <p>Based on your vulnerability assessment, we recommend exploring AI-resistant career paths:</p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* We're removing arrows since they're non-functional */}
                <Button className="flex justify-between items-center">
                  <span>Explore Career Migration Paths</span>
                </Button>
                <Button variant="outline" className="flex justify-between items-center">
                  <span>Run Career Simulation</span>
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}