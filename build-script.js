#!/usr/bin/env node

/**
 * Careerate Production Build Script
 * 
 * A simple, reliable build script that:
 * 1. Transpiles TypeScript code to JavaScript
 * 2. Copies necessary static files
 * 3. Handles path resolution correctly for production
 */

import { spawn } from 'child_process';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

// Get __dirname equivalent in ESM
const __dirname = path.dirname(fileURLToPath(import.meta.url));

// Clean dist directory
console.log('üßπ Cleaning dist directory...');
try {
  await fs.rm(path.join(__dirname, 'dist'), { recursive: true, force: true });
  await fs.mkdir(path.join(__dirname, 'dist'));
} catch (err) {
  console.error('Error cleaning dist directory:', err);
}

// Step 1: Build the client with Vite
console.log('üèóÔ∏è Building client with Vite...');
await new Promise((resolve, reject) => {
  const buildProcess = spawn('npx', ['vite', 'build'], {
    stdio: 'inherit',
    shell: true
  });
  
  buildProcess.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ Client built successfully');
      resolve();
    } else {
      console.error(`‚ùå Client build failed with code ${code}`);
      reject(new Error(`Client build failed with code ${code}`));
    }
  });
});

// Step 2: Transpile server TypeScript with tsc
console.log('üîÑ Transpiling server code...');
await new Promise((resolve, reject) => {
  const tscProcess = spawn('npx', ['tsc', '-p', 'tsconfig.build.json'], {
    stdio: 'inherit',
    shell: true
  });
  
  tscProcess.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ Server code transpiled successfully');
      resolve();
    } else {
      console.error(`‚ùå Server transpilation failed with code ${code}`);
      reject(new Error(`Server transpilation failed with code ${code}`));
    }
  });
});

// Step 3: Create production server starter file
console.log('üìù Creating production server starter...');
const serverStarterContent = `// Production server starter
// Generated by build-script.js

console.log("Starting Careerate production server...");
process.env.NODE_ENV = "production";

// Import and start the server
import('./server/index.js')
  .then(() => console.log("‚úÖ Server started successfully!"))
  .catch(err => {
    console.error("‚ùå Server failed to start:", err);
    process.exit(1);
  });
`;

await fs.writeFile(path.join(__dirname, 'dist', 'server-start.js'), serverStarterContent);

// Step 4: Copy package.json (with modifications for production)
console.log('üìã Copying package.json for production...');
const packageJson = JSON.parse(await fs.readFile(path.join(__dirname, 'package.json'), 'utf-8'));

// Modify package.json for production
const productionPackageJson = {
  ...packageJson,
  scripts: {
    ...packageJson.scripts,
    start: 'NODE_ENV=production node server-start.js'
  }
};

await fs.writeFile(
  path.join(__dirname, 'dist', 'package.json'),
  JSON.stringify(productionPackageJson, null, 2)
);

console.log('üéâ Build completed successfully!');