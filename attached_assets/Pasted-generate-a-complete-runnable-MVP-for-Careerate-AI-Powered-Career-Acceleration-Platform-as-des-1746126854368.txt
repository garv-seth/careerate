generate a complete, runnable MVP for **Careerate – AI-Powered Career Acceleration Platform** as described below.  
Deliverables: a working Replit workspace with code, a populated README, and inline comments where helpful.  
Keep the project < 100 files; prefer clarity over terseness.

────────────────────────────────────────
1. PROJECT PREP
────────────────────────────────────────
• Stack:  
  – Front-end: Next.js 14 (app router) + TypeScript + Tailwind CSS + shadcn/ui.  
  – Back-end: Express (src/server/index.ts) + Drizzle ORM targeting a managed PostgreSQL instance (REPLIT_DB_URL env).  
  – Infra: Replit Auth (App Auth), Replit Database for lightweight key-value data, Replit Object Storage (bucket: `careerate-assets`).  
  – AI/Agents: LangGraph.js, OpenAI GPT-4o, Perplexity API, Brave Search API, Browserbase, Firecrawl FIRE-1, Pinecone vector DB.  

• ENV VARS to create in the Secrets tab  
OPENAI_API_KEY= PPLX_API_KEY= BRAVE_API_KEY= BROWSERBASE_API_KEY= FIRECRAWL_API_KEY= PINECONE_API_KEY= PINECONE_ENV= PINECONE_INDEX=careerate REPLIT_DB_URL= # provided automatically

kotlin
Copy
Edit

• Install deps  
```bash
npm i next react react-dom typescript tailwindcss postcss autoprefixer \
@shadcn/ui lucide-react framer-motion @heroicons/react @replit/database \
@replit/object-storage replit-app-auth express drizzle-orm pg \
@langchain/langgraph @langchain/openai @langchain/core pinecone-client \
pplx-api brave-search npm:browserbase firecrawl-sdk zod dotenv
npx tailwindcss init -p
──────────────────────────────────────── 2. FRONT-END SCAFFOLD ──────────────────────────────────────── • Configure tailwind config with shadcn preset.
• Run npx shadcn-ui@latest init – set component path to src/components/ui.

• Add WarpBackground, NavBar, and Footer2 components exactly as given; place files:

css
Copy
Edit
src/components/ui/warp-background.tsx
src/components/ui/tubelight-navbar.tsx
src/components/ui/footer2.tsx
➜ If src/components/ui does not exist, create it; shadcn defaults there.
• In app/page.tsx, wrap the hero section in <WarpBackground>; inside, render a concise CTA, tagline “Don’t let AI replace you—embrace it”, and a “Get Early Access” button linking to /dashboard.

• Place demo stubs (warp-demo.tsx, navbar-demo.tsx, footer-demo.tsx) in storybook/ for quick visual checks.

──────────────────────────────────────── 3. AUTH & BASIC DATA LAYER ──────────────────────────────────────── • Enable Replit App Auth middleware in src/server/auth.ts

ts
Copy
Edit
import { appAuth } from "replit-app-auth";
app.use(appAuth());
This exposes req.user; gate /api/* routes with it. (See docs: https://docs.replit.com/additional-resources/repl-auth)

• Provide src/server/db.ts exporting a Drizzle instance connected via process.env.REPLIT_DB_URL; create tables: – users (id, username, email)
– profiles (user_id FK, resume_text, last_scan)
– vectors (user_id FK, pinecone_id)

──────────────────────────────────────── 4. MULTI-AGENT SYSTEM ──────────────────────────────────────── Architecture

markdown
Copy
Edit
┌───────────┐   context   ┌────────────┐
│  Cara     │ ─────────▶ │   Maya     │
│ Orchestr. │ ◀────────── │ Resume AI  │
└────┬──────┘ delegations └────┬───────┘
     │                         │
     ▼                         ▼
┌───────────┐          ┌────────────┐
│   Ellie   │◀───────▶│  Sophia     │
│ Industry  │  insights│ Learning AI│
└───────────┘          └────────────┘
• Implement in src/agents/graph.ts

ts
Copy
Edit
import { Graph } from "@langchain/langgraph";
import { OpenAI } from "@langchain/openai";
import { BraveTool, PerplexityTool, BrowserbaseTool, FirecrawlTool } from "./tools";
import { PineconeStore } from "./pinecone";

export const graph = new Graph({
  nodes: { Cara, Maya, Ellie, Sophia },
  edges: [
    ["Cara","Maya"],["Cara","Ellie"],
    ["Maya","Sophia"],["Ellie","Sophia"],
    ["Sophia","Cara"]
  ],
  memory: PineconeStore
});
• Each agent implements a run(input, ctx) signature, calls external tools via wrappers in src/agents/tools.ts, and stores embeddings in Pinecone.
• Provide sample endpoint POST /api/advise → Cara → returns JSON with riskReport, learningPlan, and nextSteps.

──────────────────────────────────────── 5. EXTERNAL TOOLS WRAPPERS ──────────────────────────────────────── • src/agents/tools.ts exports Mini-wrappers:
– Perplexity (https://docs.perplexity.ai) search + answer
– Brave Search (https://brave.com/search/api) web results
– Browserbase session for page scraping
– Firecrawl FIRE-1 for deep crawl
All wrappers expose a uniform { query: string } → Promise<string> interface for LangGraph.

──────────────────────────────────────── 6. VECTOR STORAGE ──────────────────────────────────────── • src/agents/pinecone.ts

ts
Copy
Edit
import { Pinecone } from "pinecone-client";
export const pinecone = new Pinecone({
  apiKey: process.env.PINECONE_API_KEY!,
  environment: process.env.PINECONE_ENV!
});
export const index = await pinecone.initIndex(process.env.PINECONE_INDEX!);
• Use @langchain/core embeddings with OpenAI.

──────────────────────────────────────── 7. OBJECT STORAGE ──────────────────────────────────────── • src/server/storage.ts handles uploads (e.g., user resumes) to bucket careerate-assets via @replit/object-storage.

──────────────────────────────────────── 8. ROUTING & PAGES ──────────────────────────────────────── • /dashboard (protected) shows:
– AI automation risk heat-map (placeholder)
– “Scan Resume” button -> uploads resume, triggers Maya.
– “Generate Roadmap” button -> Sophia.

──────────────────────────────────────── 9. TESTS & CI ──────────────────────────────────────── • Add Vitest + supertest for API; at least one test hitting /api/advise.
• Replit Nix run step: npm run build && npm run start.

──────────────────────────────────────── 10. README.md CONTENT (generate automatically) ──────────────────────────────────────── Include: setup, env vars, dev commands, deployment, and licensing.

──────────────────────────────────────── 11. COMPLETION CRITERIA ──────────────────────────────────────── Return success when:
• npm run dev shows landing page with warp background, navbar, footer.
• Auth flow logs in Replit user.
• /api/advise returns structured JSON.
• Pinecone index careerate contains vectors after first resume upload.
• README rendered.